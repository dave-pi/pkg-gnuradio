.TH GR_MODTOOL "1" "February 2013" "gr_modtool 3.6.4" "User Commands"
.SH NAME
gr_modtool \- The swiss army knife of Gnu Radio module editing
.SH DESCRIPTION
When developing a module, there is a lot of boring, monotonous work
involved: boilerplate code, makefile editing etc.
.PP
gr_modtool is a
script which aims to help with all these things by automatically
editing makefiles, using templates and doing as much work as possible
for the developer, such that you can jump straight into the DSP
coding.
.PP
Note that gr_modtool makes a lot of assumptions on what the code looks
like. The more your module is custom and has specific changes, the
less useful gr_modtool becomes.
.SH OPTIONS
.IP
General options:
.TP
\fB\-h\fR, \fB\-\-help\fR
Displays help message.
.TP
\fB\-d\fR DIRECTORY, \fB\-\-directory\fR=\fIDIRECTORY\fR
Base directory of the module. Defaults to the cwd.
.TP
\fB\-n\fR MODULE_NAME, \fB\-\-module\-name\fR=\fIMODULE_NAME\fR
Use this to override the current module's name (is
normally autodetected).
.TP
\fB\-N\fR BLOCK_NAME, \fB\-\-block\-name\fR=\fIBLOCK_NAME\fR
Name of the block, where applicable.
.TP
\fB\-\-skip\-lib\fR
Don't do anything in the lib/ subdirectory.
.TP
\fB\-\-skip\-swig\fR
Don't do anything in the swig/ subdirectory.
.TP
\fB\-\-skip\-python\fR
Don't do anything in the python/ subdirectory.
.TP
\fB\-\-skip\-grc\fR
Don't do anything in the grc/ subdirectory.
.TP
\fB\-y\fR, \fB\-\-yes\fR
Answer all questions with 'yes'. This can overwrite
and delete your files, so be careful.

.SH USAGE
gr_modtool <command> [options] \fB\-\-\fR Run <command> with the given
options.
.PP
gr_modtool help \fB\-\-\fR Show a list of commands.
.PP
gr_modtool help <command> \fB\-\-\fR Shows the help for a given
command.
.PP
List of possible commands:
.PP
Name      Aliases          Description
.br
=====================================================================
.br
disable   dis              Disable block
.br
info      getinfo,inf      Return information about a given module
.br
remove    rm,del           Remove block
.br
makexml   mx               Make XML file for GRC block bindings
.br
add       insert           Add block to the out\-of\-tree module.
.br
newmod    nm,create        Create a new out\-of\-tree module
.PP
gr_modtool <command> [options] \fB\-\-\fR Run <command> with the given
options.
.br
gr_modtool help \fB\-\-\fR Show a list of commands.
.br
gr_modtool help <command> \fB\-\-\fR Shows the help for a given
command.

.SH DISABLE
.B gr_modtool
\fIdisable \fR[\fIoptions\fR] \fI<PATTERN>\fR
.PP
Call gr_modtool disable without any options to run it interactively.

.SH INFO
Info options:
.TP
\fB\-\-python\-readable\fR
Return the output in a format that's easier to read
for Python scripts.
.TP
\fB\-\-suggested\-dirs\fR=\fISUGGESTED_DIRS\fR
Suggest typical include dirs if nothing better can be
detected.

.SH REMOVE
.B gr_modtool
\fIremove \fR[\fIoptions\fR] \fI<PATTERN>\fR

.SH MAKEXML
.B gr_modtool
\fImakexml \fR[\fIoptions\fR] \fI<PATTERN>\fR

.SH ADD
Add module options:
.TP
\fB\-t\fR BLOCK_TYPE, \fB\-\-block\-type\fR=\fIBLOCK_TYPE\fR
One of sink, source, sync, decimator, interpolator,
general, hier, noblock.
.TP
\fB\-\-license\-file\fR=\fILICENSE_FILE\fR
File containing the license header for every source
code file.
.TP
\fB\-\-argument\-list\fR=\fIARGUMENT_LIST\fR
The argument list for the constructor and make
functions.
.TP
\fB\-\-add\-python\-qa\fR
If given, Python QA code is automatically added if
possible.
.TP
\fB\-\-add\-cpp\-qa\fR
If given, C++ QA code is automatically added if
possible.
.TP
\fB\-\-skip\-cmakefiles\fR
If given, only source files are written, but
CMakeLists.txt files are left unchanged.
.TP
\fB\-l\fR LANG, \fB\-\-lang\fR=\fILANG\fR
Language (cpp or python)

.SH NEWMOD
New out\-of\-tree module options:
.TP
\fB\-\-srcdir\fR=\fISRCDIR\fR
Source directory for the module template.

.SH "SEE ALSO"
http://gnuradio.org/redmine/projects/gnuradio/wiki/OutOfTreeModules
