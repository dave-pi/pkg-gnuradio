From 46e87f9f469daa6bc13768ade41cd157e70a8a29 Mon Sep 17 00:00:00 2001
From: Tom Rondeau <tom@trondeau.com>
Date: Wed, 25 Sep 2013 19:33:53 -0400
Subject: [PATCH 39/40] filter: fixed some QA code to compute the output
 instead of using previously generated samples.

---
 gr-filter/python/filter/qa_adaptive_fir_filter.py |  113 +++-------
 gr-filter/python/filter/qa_fir_filter.py          |  241 ++++++---------------
 gr-filter/python/filter/qa_hilbert.py             |   80 ++-----
 3 files changed, 108 insertions(+), 326 deletions(-)

diff --git a/gr-filter/python/filter/qa_adaptive_fir_filter.py b/gr-filter/python/filter/qa_adaptive_fir_filter.py
index 9ed5e7b..cb82c7e 100755
--- a/gr-filter/python/filter/qa_adaptive_fir_filter.py
+++ b/gr-filter/python/filter/qa_adaptive_fir_filter.py
@@ -21,6 +21,16 @@
 
 from gnuradio import gr, gr_unittest, filter, blocks
 
+def fir_filter(x, taps, decim=1):
+    y = []
+    x2 = (len(taps)-1)*[0,] + x
+    for i in range(0, len(x), decim):
+        yi = 0
+        for j in range(len(taps)):
+            yi += taps[len(taps)-1-j] * x2[i+j]
+        y.append(yi)
+    return y
+
 class test_adaptive_filter(gr_unittest.TestCase):
 
     def setUp(self):
@@ -30,38 +40,13 @@ class test_adaptive_filter(gr_unittest.TestCase):
         self.tb = None
 
     def test_adaptive_fir_filter_ccf_001(self):
+        decim = 1
+        taps = 20*[0.5, 0.5]
         src_data = 40*[1+1j, 2+2j, 3+3j, 4+4j]
-        expected_data = ((0.5+0.5j), (1.5+1.5j), (3+3j), (5+5j), (5.5+5.5j),
-                         (6.5+6.5j), (8+8j), (10+10j), (10.5+10.5j), (11.5+11.5j),
-                         (13+13j), (15+15j), (15.5+15.5j), (16.5+16.5j), (18+18j),
-                         (20+20j), (20.5+20.5j), (21.5+21.5j), (23+23j), (25+25j),
-                         (25.5+25.5j), (26.5+26.5j), (28+28j), (30+30j), (30.5+30.5j),
-                         (31.5+31.5j), (33+33j), (35+35j), (35.5+35.5j), (36.5+36.5j),
-                         (38+38j), (40+40j), (40.5+40.5j), (41.5+41.5j), (43+43j),
-                         (45+45j), (45.5+45.5j), (46.5+46.5j), (48+48j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j))
+        expected_data = fir_filter(src_data, taps, decim)
 
         src = blocks.vector_source_c(src_data)
-        op  = filter.adaptive_fir_ccf("test", 1, 20*[0.5, 0.5])
+        op  = filter.adaptive_fir_ccf("test", decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -69,18 +54,13 @@ class test_adaptive_filter(gr_unittest.TestCase):
         self.assertComplexTuplesAlmostEqual(expected_data, result_data, 5)
 
     def test_adaptive_fir_filter_ccf_002(self):
+        decim = 4
+        taps = 20*[0.5, 0.5]
         src_data = 40*[1+1j, 2+2j, 3+3j, 4+4j]
-        expected_data = ((0.5+0.5j), (5.5+5.5j), (10.5+10.5j), (15.5+15.5j),
-                         (20.5+20.5j), (25.5+25.5j), (30.5+30.5j), (35.5+35.5j),
-                         (40.5+40.5j), (45.5+45.5j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j))
+        expected_data = fir_filter(src_data, taps, decim)
 
         src = blocks.vector_source_c(src_data)
-        op  = filter.adaptive_fir_ccf("test", 4, 20*[0.5, 0.5])
+        op  = filter.adaptive_fir_ccf("test", decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -88,43 +68,13 @@ class test_adaptive_filter(gr_unittest.TestCase):
         self.assertComplexTuplesAlmostEqual(expected_data, result_data, 5)
 
     def test_adaptive_fir_filter_ccc_001(self):
+        decim = 1
+        taps = 20*[0.5+1j, 0.5+1j]
         src_data = 40*[1+1j, 2+2j, 3+3j, 4+4j]
-        expected_data = ((-0.5+1.5j), (-1.5+4.5j), (-3+9j), (-5+15j),
-                         (-5.5+16.5j), (-6.5+19.5j), (-8+24j), (-10+30j),
-                         (-10.5+31.5j), (-11.5+34.5j), (-13+39j), (-15+45j),
-                         (-15.5+46.5j), (-16.5+49.5j), (-18+54j), (-20+60j),
-                         (-20.5+61.5j), (-21.5+64.5j), (-23+69j), (-25+75j),
-                         (-25.5+76.5j), (-26.5+79.5j), (-28+84j), (-30+90j),
-                         (-30.5+91.5j), (-31.5+94.5j), (-33+99j), (-35+105j),
-                         (-35.5+106.5j), (-36.5+109.5j), (-38+114j), (-40+120j),
-                         (-40.5+121.5j), (-41.5+124.5j), (-43+129j), (-45+135j),
-                         (-45.5+136.5j), (-46.5+139.5j), (-48+144j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j))
+        expected_data = fir_filter(src_data, taps, decim)
+
         src = blocks.vector_source_c(src_data)
-        op  = filter.adaptive_fir_ccc("test", 1, 20*[0.5+1j, 0.5+1j])
+        op  = filter.adaptive_fir_ccc("test", decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -133,20 +83,13 @@ class test_adaptive_filter(gr_unittest.TestCase):
 
 
     def test_adaptive_fir_filter_ccc_002(self):
+        decim = 4
+        taps = 20*[0.5+1j, 0.5+1j]
         src_data = 40*[1+1j, 2+2j, 3+3j, 4+4j]
-        expected_data = ((-0.5+1.5j), (-5.5+16.5j), (-10.5+31.5j),
-                         (-15.5+46.5j), (-20.5+61.5j), (-25.5+76.5j),
-                         (-30.5+91.5j), (-35.5+106.5j), (-40.5+121.5j),
-                         (-45.5+136.5j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j))
+        expected_data = fir_filter(src_data, taps, decim)
+
         src = blocks.vector_source_c(src_data)
-        op  = filter.adaptive_fir_ccc("test", 4, 20*[0.5+1j, 0.5+1j])
+        op  = filter.adaptive_fir_ccc("test", decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
diff --git a/gr-filter/python/filter/qa_fir_filter.py b/gr-filter/python/filter/qa_fir_filter.py
index e9cc8e2..9509ef8 100755
--- a/gr-filter/python/filter/qa_fir_filter.py
+++ b/gr-filter/python/filter/qa_fir_filter.py
@@ -21,6 +21,16 @@
 
 from gnuradio import gr, gr_unittest, filter, blocks
 
+def fir_filter(x, taps, decim=1):
+    y = []
+    x2 = (len(taps)-1)*[0,] + x
+    for i in range(0, len(x), decim):
+        yi = 0
+        for j in range(len(taps)):
+            yi += taps[len(taps)-1-j] * x2[i+j]
+        y.append(yi)
+    return y
+
 class test_filter(gr_unittest.TestCase):
 
     def setUp(self):
@@ -30,32 +40,13 @@ class test_filter(gr_unittest.TestCase):
         self.tb = None
 
     def test_fir_filter_fff_001(self):
+        decim = 1
+        taps = 20*[0.5, 0.5]
         src_data = 40*[1, 2, 3, 4]
-        expected_data = (0.5, 1.5, 3.0, 5.0, 5.5, 6.5, 8.0, 10.0,
-                         10.5, 11.5, 13.0, 15.0, 15.5, 16.5, 18.0,
-                         20.0, 20.5, 21.5, 23.0, 25.0, 25.5, 26.5,
-                         28.0, 30.0, 30.5, 31.5, 33.0, 35.0, 35.5,
-                         36.5, 38.0, 40.0, 40.5, 41.5, 43.0, 45.0,
-                         45.5, 46.5, 48.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0)
+        expected_data = fir_filter(src_data, taps, decim)
+
         src = blocks.vector_source_f(src_data)
-        op  = filter.fir_filter_fff(1, 20*[0.5, 0.5])
+        op  = filter.fir_filter_fff(decim, taps)
         dst = blocks.vector_sink_f()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -63,14 +54,13 @@ class test_filter(gr_unittest.TestCase):
         self.assertFloatTuplesAlmostEqual(expected_data, result_data, 5)
 
     def test_fir_filter_fff_002(self):
+        decim = 4
+        taps = 20*[0.5, 0.5]
         src_data = 40*[1, 2, 3, 4]
-        expected_data = (0.5, 5.5, 10.5, 15.5, 20.5, 25.5, 30.5, 35.5,
-                         40.5, 45.5, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0,
-                         50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0)
+        expected_data = fir_filter(src_data, taps, decim)
+
         src = blocks.vector_source_f(src_data)
-        op  = filter.fir_filter_fff(4, 20*[0.5, 0.5])
+        op  = filter.fir_filter_fff(decim, taps)
         dst = blocks.vector_sink_f()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -78,38 +68,13 @@ class test_filter(gr_unittest.TestCase):
         self.assertFloatTuplesAlmostEqual(expected_data, result_data, 5)
 
     def test_fir_filter_ccf_001(self):
+        decim = 1
+        taps = 20*[0.5, 0.5]
         src_data = 40*[1+1j, 2+2j, 3+3j, 4+4j]
-        expected_data = ((0.5+0.5j), (1.5+1.5j), (3+3j), (5+5j), (5.5+5.5j),
-                         (6.5+6.5j), (8+8j), (10+10j), (10.5+10.5j), (11.5+11.5j),
-                         (13+13j), (15+15j), (15.5+15.5j), (16.5+16.5j), (18+18j),
-                         (20+20j), (20.5+20.5j), (21.5+21.5j), (23+23j), (25+25j),
-                         (25.5+25.5j), (26.5+26.5j), (28+28j), (30+30j), (30.5+30.5j),
-                         (31.5+31.5j), (33+33j), (35+35j), (35.5+35.5j), (36.5+36.5j),
-                         (38+38j), (40+40j), (40.5+40.5j), (41.5+41.5j), (43+43j),
-                         (45+45j), (45.5+45.5j), (46.5+46.5j), (48+48j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j))
+        expected_data = fir_filter(src_data, taps, decim)
 
         src = blocks.vector_source_c(src_data)
-        op  = filter.fir_filter_ccf(1, 20*[0.5, 0.5])
+        op  = filter.fir_filter_ccf(decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -117,18 +82,13 @@ class test_filter(gr_unittest.TestCase):
         self.assertComplexTuplesAlmostEqual(expected_data, result_data, 5)
 
     def test_fir_filter_ccf_002(self):
+        decim = 4
+        taps = 20*[0.5, 0.5]
         src_data = 40*[1+1j, 2+2j, 3+3j, 4+4j]
-        expected_data = ((0.5+0.5j), (5.5+5.5j), (10.5+10.5j), (15.5+15.5j),
-                         (20.5+20.5j), (25.5+25.5j), (30.5+30.5j), (35.5+35.5j),
-                         (40.5+40.5j), (45.5+45.5j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j), (50+50j),
-                         (50+50j), (50+50j), (50+50j), (50+50j))
+        expected_data = fir_filter(src_data, taps, decim)
 
         src = blocks.vector_source_c(src_data)
-        op  = filter.fir_filter_ccf(4, 20*[0.5, 0.5])
+        op  = filter.fir_filter_ccf(decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -136,43 +96,13 @@ class test_filter(gr_unittest.TestCase):
         self.assertComplexTuplesAlmostEqual(expected_data, result_data, 5)
 
     def test_fir_filter_ccc_001(self):
+        decim = 1
+        taps = 20*[0.5+1j, 0.5+1j]
         src_data = 40*[1+1j, 2+2j, 3+3j, 4+4j]
-        expected_data = ((-0.5+1.5j), (-1.5+4.5j), (-3+9j), (-5+15j),
-                         (-5.5+16.5j), (-6.5+19.5j), (-8+24j), (-10+30j),
-                         (-10.5+31.5j), (-11.5+34.5j), (-13+39j), (-15+45j),
-                         (-15.5+46.5j), (-16.5+49.5j), (-18+54j), (-20+60j),
-                         (-20.5+61.5j), (-21.5+64.5j), (-23+69j), (-25+75j),
-                         (-25.5+76.5j), (-26.5+79.5j), (-28+84j), (-30+90j),
-                         (-30.5+91.5j), (-31.5+94.5j), (-33+99j), (-35+105j),
-                         (-35.5+106.5j), (-36.5+109.5j), (-38+114j), (-40+120j),
-                         (-40.5+121.5j), (-41.5+124.5j), (-43+129j), (-45+135j),
-                         (-45.5+136.5j), (-46.5+139.5j), (-48+144j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j), (-50+150j))
+        expected_data = fir_filter(src_data, taps, decim)
+        
         src = blocks.vector_source_c(src_data)
-        op  = filter.fir_filter_ccc(1, 20*[0.5+1j, 0.5+1j])
+        op  = filter.fir_filter_ccc(decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -181,14 +111,13 @@ class test_filter(gr_unittest.TestCase):
 
 
     def test_fir_filter_ccc_002(self):
+        decim = 1
+        taps = filter.firdes.low_pass(1, 1, 0.1, 0.01)
         src_data = 10*[1+1j, 2+2j, 3+3j, 4+4j]
+        expected_data = fir_filter(src_data, taps, decim)
         
-        # results derived from original filter.fir_filter_ccc
-        expected_data = ((7.537424837948042e-20+7.537424837948042e-20j), (9.131923434324563e-05+9.131923434324563e-05j), (0.0003317668742965907+0.0003317668742965907j), (0.0007230418268591166+0.0007230418268591166j), (0.0012087896466255188+0.0012087896466255188j), (0.0013292605290189385+0.0013292605290189385j), (0.001120875240303576+0.001120875240303576j), (0.000744672492146492+0.000744672492146492j), (0.000429437990533188+0.000429437990533188j), (2.283908543176949e-05+2.283908543176949e-05j), (-0.0002245186478830874-0.0002245186478830874j), (-0.0001157080550910905-0.0001157080550910905j), (0.00041409023106098175+0.00041409023106098175j), (0.0009017843985930085+0.0009017843985930085j), (0.0012520025484263897+0.0012520025484263897j), (0.0014116164529696107+0.0014116164529696107j), (0.001393353333696723+0.001393353333696723j), (0.000912194955162704+0.000912194955162704j), (0.00022649182938039303+0.00022649182938039303j), (-0.00031363096786662936-0.00031363096786662936j), (-0.0003966730728279799-0.0003966730728279799j), (-0.00023757052258588374-0.00023757052258588374j), (0.00021952332463115454+0.00021952332463115454j), (0.0009092430118471384+0.0009092430118471384j), (0.001662317430600524+0.001662317430600524j), (0.0019024648936465383+0.0019024648936465383j), (0.0015955769922584295+0.0015955769922584295j), (0.0009144138311967254+0.0009144138311967254j), (0.0001872836146503687+0.0001872836146503687j), (-0.000581968342885375-0.000581968342885375j), (-0.0009886166080832481-0.0009886166080832481j), (-0.0007480768254026771-0.0007480768254026771j), (0.00018211957649327815+0.00018211957649327815j), (0.0012042406015098095+0.0012042406015098095j), (0.0020200139842927456+0.0020200139842927456j), (0.0023816542234271765+0.0023816542234271765j), (0.002195809967815876+0.002195809967815876j), (0.0012113333214074373+0.0012113333214074373j), (-0.00014088614261709154-0.00014088614261709154j), (-0.0012574587017297745-0.0012574587017297745j))
-
-        taps = filter.firdes.low_pass(1, 1, 0.1, 0.01)
         src = blocks.vector_source_c(src_data)
-        op  = filter.fir_filter_ccc(1, taps)
+        op  = filter.fir_filter_ccc(decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -196,20 +125,13 @@ class test_filter(gr_unittest.TestCase):
         self.assertComplexTuplesAlmostEqual(expected_data, result_data, 5)
 
     def test_fir_filter_ccc_003(self):
+        decim = 4
+        taps = 20*[0.5+1j, 0.5+1j]
         src_data = 40*[1+1j, 2+2j, 3+3j, 4+4j]
-        expected_data = ((-0.5+1.5j), (-5.5+16.5j), (-10.5+31.5j),
-                         (-15.5+46.5j), (-20.5+61.5j), (-25.5+76.5j),
-                         (-30.5+91.5j), (-35.5+106.5j), (-40.5+121.5j),
-                         (-45.5+136.5j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j), (-50+150j),
-                         (-50+150j), (-50+150j), (-50+150j))
+        expected_data = fir_filter(src_data, taps, decim)
+
         src = blocks.vector_source_c(src_data)
-        op  = filter.fir_filter_ccc(4, 20*[0.5+1j, 0.5+1j])
+        op  = filter.fir_filter_ccc(decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -218,41 +140,13 @@ class test_filter(gr_unittest.TestCase):
 
 
     def test_fir_filter_scc_001(self):
+        decim = 1
+        taps = 20*[0.5+1j, 0.5+1j]
         src_data = 40*[1, 2, 3, 4]
-        expected_data = ((0.5+1j), (1.5+3j), (3+6j), (5+10j), (5.5+11j),
-                         (6.5+13j), (8+16j), (10+20j), (10.5+21j), (11.5+23j),
-                         (13+26j), (15+30j), (15.5+31j), (16.5+33j), (18+36j),
-                         (20+40j), (20.5+41j), (21.5+43j), (23+46j), (25+50j),
-                         (25.5+51j), (26.5+53j), (28+56j), (30+60j), (30.5+61j),
-                         (31.5+63j), (33+66j), (35+70j), (35.5+71j), (36.5+73j),
-                         (38+76j), (40+80j), (40.5+81j), (41.5+83j), (43+86j),
-                         (45+90j), (45.5+91j), (46.5+93j), (48+96j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j))
+        expected_data = fir_filter(src_data, taps, decim)
+
         src = blocks.vector_source_s(src_data)
-        op  = filter.fir_filter_scc(1, 20*[0.5+1j, 0.5+1j])
+        op  = filter.fir_filter_scc(decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -261,17 +155,13 @@ class test_filter(gr_unittest.TestCase):
 
 
     def test_fir_filter_scc_002(self):
+        decim = 4
+        taps = 20*[0.5+1j, 0.5+1j]
         src_data = 40*[1, 2, 3, 4]
-        expected_data = ((0.5+1j), (5.5+11j), (10.5+21j), (15.5+31j), (20.5+41j),
-                         (25.5+51j), (30.5+61j), (35.5+71j), (40.5+81j), (45.5+91j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j),
-                         (50+100j), (50+100j), (50+100j), (50+100j), (50+100j))
+        expected_data = fir_filter(src_data, taps, decim)
+
         src = blocks.vector_source_s(src_data)
-        op  = filter.fir_filter_scc(4, 20*[0.5+1j, 0.5+1j])
+        op  = filter.fir_filter_scc(decim, taps)
         dst = blocks.vector_sink_c()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -279,19 +169,14 @@ class test_filter(gr_unittest.TestCase):
         self.assertComplexTuplesAlmostEqual(expected_data, result_data, 5)
 
     def test_fir_filter_fsf_001(self):
+        decim = 1
+        taps = 20*[0.5, 0.5]
         src_data = 40*[1, 2, 3, 4]
-        expected_data =(0, 1, 3, 5, 5, 6, 8, 10, 10, 11, 13, 15, 15, 16, 18, 20, 20,
-                        21, 23, 25, 25, 26, 28, 30, 30, 31, 33, 35, 35, 36, 38, 40, 40,
-                        41, 43, 45, 45, 46, 48, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
-                        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
-                        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
-                        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
-                        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
-                        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
-                        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
-                        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50)
+        expected_data = fir_filter(src_data, taps, decim)
+        expected_data = [int(e) for e in expected_data]
+
         src = blocks.vector_source_f(src_data)
-        op  = filter.fir_filter_fsf(1, 20*[0.5, 0.5])
+        op  = filter.fir_filter_fsf(decim, taps)
         dst = blocks.vector_sink_s()
         self.tb.connect(src, op, dst)
         self.tb.run()
@@ -300,12 +185,14 @@ class test_filter(gr_unittest.TestCase):
 
 
     def test_fir_filter_fsf_002(self):
+        decim = 4
+        taps = 20*[0.5, 0.5]
         src_data = 40*[1, 2, 3, 4]
-        expected_data = (0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 50, 50, 50, 50,
-                         50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
-                         50, 50, 50, 50, 50, 50, 50, 50, 50, 50)
+        expected_data = fir_filter(src_data, taps, decim)
+        expected_data = [int(e) for e in expected_data]
+
         src = blocks.vector_source_f(src_data)
-        op  = filter.fir_filter_fsf(4, 20*[0.5, 0.5])
+        op  = filter.fir_filter_fsf(decim, taps)
         dst = blocks.vector_sink_s()
         self.tb.connect(src, op, dst)
         self.tb.run()
diff --git a/gr-filter/python/filter/qa_hilbert.py b/gr-filter/python/filter/qa_hilbert.py
index d603b9e..96901bf 100755
--- a/gr-filter/python/filter/qa_hilbert.py
+++ b/gr-filter/python/filter/qa_hilbert.py
@@ -28,6 +28,17 @@ def sig_source_f(samp_rate, freq, amp, N):
     y = map(lambda x: math.sin(2.*math.pi*freq*x), t)
     return y
 
+def fir_filter(x, taps):
+    y = []
+    x2 = (len(taps)-1)*[0,] + x
+    delay = (len(taps)-1)/2
+    for i in range(len(x)):
+        yi = 0
+        for j in range(len(taps)):
+            yi += taps[len(taps)-1-j] * x2[i+j]
+        y.append(complex(x2[i+delay], yi))
+    return y
+
 class test_hilbert(gr_unittest.TestCase):
 
     def setUp(self):
@@ -40,81 +51,22 @@ class test_hilbert(gr_unittest.TestCase):
         tb = self.tb
         ntaps = 51
         sampling_freq = 100
-
-        expected_result = (                             -1.4678005338941702e-11j,
-                                                        -0.0011950774351134896j,
-                                                        -0.0019336787518113852j,
-                                                        -0.0034673355985432863j,
-                                                        -0.0036765895783901215j,
-                                                        -0.004916108213365078j,
-                                                        -0.0042778430506587029j,
-                                                        -0.006028641015291214j,
-                                                        -0.005476709920912981j,
-                                                        -0.0092810001224279404j,
-                                                        -0.0095402700826525688j,
-                                                        -0.016060983762145042j,
-                                                        -0.016446959227323532j,
-                                                        -0.02523401565849781j,
-                                                        -0.024382550269365311j,
-                                                        -0.035477779805660248j,
-                                                        -0.033021725714206696j,
-                                                        -0.048487484455108643j,
-                                                        -0.04543270543217659j,
-                                                        -0.069477587938308716j,
-                                                        -0.066984444856643677j,
-                                                        -0.10703597217798233j,
-                                                        -0.10620346665382385j,
-                                                        -0.1852707713842392j,
-                                                        -0.19357112050056458j,
-                            (7.2191945754696007e-09     -0.50004088878631592j),
-                            (0.58778399229049683        -0.6155126690864563j),
-                            (0.95105588436126709        -0.12377222627401352j),
-                            (0.95105588436126709        +0.41524654626846313j),
-                            (0.5877838134765625         +0.91611981391906738j),
-                            (5.8516356205018383e-09     +1.0670661926269531j),
-                            (-0.5877840518951416        +0.87856143712997437j),
-                            (-0.95105588436126709       +0.35447561740875244j),
-                            (-0.95105588436126709       -0.26055556535720825j),
-                            (-0.5877838134765625        -0.77606213092803955j),
-                            (-8.7774534307527574e-09    -0.96460390090942383j),
-                            (0.58778399229049683        -0.78470128774642944j),
-                            (0.95105588436126709        -0.28380891680717468j),
-                            (0.95105588436126709        +0.32548999786376953j),
-                            (0.5877838134765625         +0.82514488697052002j),
-                            (1.4629089051254596e-08     +1.0096219778060913j),
-                            (-0.5877840518951416        +0.81836479902267456j),
-                            (-0.95105588436126709       +0.31451958417892456j),
-                            (-0.95105588436126709       -0.3030143678188324j),
-                            (-0.5877838134765625        -0.80480599403381348j),
-                            (-1.7554906861505515e-08    -0.99516552686691284j),
-                            (0.58778399229049683        -0.80540722608566284j),
-                            (0.95105582475662231        -0.30557557940483093j),
-                            (0.95105588436126709        +0.31097668409347534j),
-                            (0.5877838134765625         +0.81027895212173462j),
-                            (2.3406542482007353e-08     +1.0000816583633423j),
-                            (-0.5877840518951416        +0.80908381938934326j),
-                            (-0.95105588436126709       +0.30904293060302734j),
-                            (-0.95105588436126709       -0.30904296040534973j),
-                            (-0.5877838134765625        -0.80908387899398804j),
-                            (-2.6332360292258272e-08    -1.0000815391540527j),
-                            (0.58778399229049683        -0.80908381938934326j),
-                            (0.95105582475662231        -0.30904299020767212j),
-                            (0.95105588436126709        +0.30904293060302734j),
-                            (0.5877838134765625         +0.80908381938934326j),
-                            (3.218399768911695e-08      +1.0000815391540527j))
-
         
         N = int(ntaps + sampling_freq * 0.10)
         data = sig_source_f(sampling_freq, sampling_freq * 0.10, 1.0, N)
         src1 = blocks.vector_source_f(data)
 
+        taps = filter.firdes.hilbert(ntaps, filter.firdes.WIN_HAMMING)
+        expected_result = fir_filter(data, taps)
+
         hilb = filter.hilbert_fc(ntaps)
         dst1 = blocks.vector_sink_c()
         tb.connect(src1, hilb)
         tb.connect(hilb, dst1)
         tb.run()
         dst_data = dst1.data()
-        self.assertComplexTuplesAlmostEqual (expected_result, dst_data, 5)
+
+        self.assertComplexTuplesAlmostEqual(expected_result, dst_data, 5)
 
 if __name__ == '__main__':
     gr_unittest.run(test_hilbert, "test_hilbert.xml")
-- 
1.7.10.4

