From c987793229874b7345e939c174b21ef2e509aa8c Mon Sep 17 00:00:00 2001
From: Johannes Demel <demel@ant.uni-bremen.de>
Date: Fri, 10 Mar 2017 16:26:50 +0100
Subject: [PATCH 02/58] replaced boost::random::uniform_int_distribution with
 boost::uniform_int to resolve issue 1227

---
 gnuradio-runtime/include/gnuradio/random.h | 4 ++--
 gnuradio-runtime/lib/math/random.cc        | 8 ++++----
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/gnuradio-runtime/include/gnuradio/random.h b/gnuradio-runtime/include/gnuradio/random.h
index 2167247526..9aadadff29 100644
--- a/gnuradio-runtime/include/gnuradio/random.h
+++ b/gnuradio-runtime/include/gnuradio/random.h
@@ -45,9 +45,9 @@ namespace gr {
 
     boost::mt19937 *d_rng; // mersenne twister as random number generator
     boost::uniform_real<float> *d_uniform; // choose uniform distribution, default is [0,1)
-    boost::random::uniform_int_distribution<> *d_integer_dis;
+    boost::uniform_int<> *d_integer_dis;
     boost::variate_generator<boost::mt19937&, boost::uniform_real<float> > *d_generator;
-    boost::variate_generator<boost::mt19937&, boost::random::uniform_int_distribution<> > *d_integer_generator;
+    boost::variate_generator<boost::mt19937&, boost::uniform_int<> > *d_integer_generator;
 
   public:
     random(unsigned int seed=0, int min_integer = 0, int max_integer = 2);
diff --git a/gnuradio-runtime/lib/math/random.cc b/gnuradio-runtime/lib/math/random.cc
index 35f63076b2..0d37884373 100644
--- a/gnuradio-runtime/lib/math/random.cc
+++ b/gnuradio-runtime/lib/math/random.cc
@@ -51,7 +51,7 @@ namespace gr {
     // Setup random number generators
     d_rng = new boost::mt19937; // random numbers are generated here.
     d_uniform = new boost::uniform_real<float>; // map random number to distribution
-    d_integer_dis = new boost::random::uniform_int_distribution<>(0, 1); // another "mapper"
+    d_integer_dis = new boost::uniform_int<>(0, 1); // another "mapper"
     d_generator = NULL; // MUST be reinstantiated on every call to reseed.
     d_integer_generator = NULL; // MUST be reinstantiated on everytime d_rng or d_integer_dis is changed.
     reseed(seed); // set seed for random number generator
@@ -80,16 +80,16 @@ namespace gr {
     delete d_generator;
     d_generator = new boost::variate_generator<boost::mt19937&, boost::uniform_real<float> > (*d_rng,*d_uniform); // create number generator in [0,1) from boost.random
     delete d_integer_generator;
-    d_integer_generator = new boost::variate_generator<boost::mt19937&, boost::random::uniform_int_distribution<> >(*d_rng, *d_integer_dis);
+    d_integer_generator = new boost::variate_generator<boost::mt19937&, boost::uniform_int<> >(*d_rng, *d_integer_dis);
   }
 
   void
   random::set_integer_limits(const int minimum, const int maximum){
     // boost expects integer limits defined as [minimum, maximum] which is unintuitive.
-    boost::random::uniform_int_distribution<>::param_type dis_params(minimum, maximum - 1);
+    boost::uniform_int<>::param_type dis_params(minimum, maximum - 1);
     d_integer_dis->param(dis_params);
     delete d_integer_generator;
-    d_integer_generator = new boost::variate_generator<boost::mt19937&, boost::random::uniform_int_distribution<> >(*d_rng, *d_integer_dis);
+    d_integer_generator = new boost::variate_generator<boost::mt19937&, boost::uniform_int<> >(*d_rng, *d_integer_dis);
   }
 
   /*!
-- 
2.11.0

